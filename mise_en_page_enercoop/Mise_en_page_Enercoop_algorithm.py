# -*- coding: utf-8 -*-

"""
/***************************************************************************
 Mise_en_page_Enercoop
                                 A QGIS plugin
 Un plugin permettant de faire des sorties de mise en page automatique
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2023-04-26
        copyright            : (C) 2023 by Jumeau-Mousset Lucas
        email                : lucas.jumeau-mousset@enercoop.org
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""

__author__ = 'Jumeau-Mousset Lucas'
__date__ = '2023-04-26'
__copyright__ = '(C) 2023 by Jumeau-Mousset Lucas'

# This will get replaced with a git SHA1 when you do a git archive

__revision__ = '$Format:%H$'

from qgis.PyQt.QtCore import QCoreApplication
from qgis.core import (QgsProcessing,
                       QgsFeatureSink,
                       QgsProcessingAlgorithm,
                       QgsProcessingParameterFeatureSource,
                       QgsProcessingParameterFeatureSink,
                       QgsProcessingParameterEnum,
                       QgsProcessingParameterString,
                       QgsProcessingParameterFolderDestination,
                       QgsProcessingParameterBoolean,
                       QgsProcessingFeedback,
                       QgsProcessingParameterVectorLayer,
                       QgsProcessingParameterFile)
from qgis import processing


class Mise_en_page_EnercoopAlgorithm(QgsProcessingAlgorithm):
    """
    This is an example algorithm that takes a vector layer and
    creates a new identical one.

    It is meant to be used as an example of how to create your own
    algorithms and explain methods and variables used to do it. An
    algorithm like this will be available in all elements, and there
    is not need for additional work.

    All Processing algorithms should extend the QgsProcessingAlgorithm
    class.
    """

    # Constants used to refer to parameters and outputs. They will be
    # used when calling the algorithm from another algorithm, or when
    # calling from the QGIS console.

    EMPRISE = 'EMPRISE'
    FILTRE = 'FILTRE'
    THEMATIQUE = 'THEMATIQUE'
    FORMAT_EXPORT = 'FORMAT_EXPORT'
    OUTPUT_FOLDER = 'OUTPUT_FOLDER'
    
    

    def name(self):
        """
        Returns the algorithm name, used for identifying the algorithm. This
        string should be fixed for the algorithm, and must not be localised.
        The name should be unique within each provider. Names should contain
        lowercase alphanumeric characters only and no spaces or other
        formatting characters.
        """
        return 'Mise en page Enercoop'

    def displayName(self):
        """
        Returns the translated algorithm name, which should be used for any
        user-visible display of the algorithm name.
        """
        return self.tr(self.name())

    def group(self):
        """
        Returns the name of the group this algorithm belongs to. This string
        should be localised.
        """
        return self.tr(self.groupId())

    def groupId(self):
        """
        Returns the unique ID of the group this algorithm belongs to. This
        string should be fixed for the algorithm, and must not be localised.
        The group id should be unique within each provider. Group id should
        contain lowercase alphanumeric characters only and no spaces or other
        formatting characters.
        """
        return ''

    def tr(self, string):
        return QCoreApplication.translate('Processing', string)

    def createInstance(self):
        return Mise_en_page_EnercoopAlgorithm()

    def initAlgorithm(self, config=None):
        """
        Here we define the inputs and output of the algorithm, along
        with some other properties.
        """
        # Parameter for the cover layer, it's a vector parameter
        self.addParameter(
            QgsProcessingParameterVectorLayer(
                self.EMPRISE,
                self.tr('Couche de couverture :'),
                [QgsProcessing.TypeVectorAnyGeometry]
            )
        )

        # Parameter for the selected or not choice, it's a bool parameter
        self.addParameter(
            QgsProcessingParameterBoolean(
                self.FILTRE,
                self.tr('Traiter uniquement les entités sélectionnées')

            )
        )

        # Parameter for the layout enum, it's a enum parameter
        self.addParameter(
            QgsProcessingParameterEnum(
                self.THEMATIQUE,
                self.tr('Thématique :'),
                options=['Environnement', 'Localisation'],
                allowMultiple=False

            )
        )

        # Parameter for the export format enum, it's a enum parameter
        self.addParameter(
            QgsProcessingParameterEnum(
                self.FORMAT_EXPORT,
                self.tr('Format de document :'),
                options=['pdf', 'png'],
                allowMultiple=False

            )
        )

        # Parameter for output folder, it's a parameter File that act for folder
        self.addParameter(
            QgsProcessingParameterFile(
                self.OUTPUT_FOLDER,
                self.tr("Dossier de sortie :"),
                behavior=QgsProcessingParameterFile.Folder
                
            )
        )
    

    def processAlgorithm(self, parameters, context, feedback):

        # Create variables to check the progress with logs and progress bar
        log = feedback.setProgressText
        bar = feedback.setProgress

        # Encapsulate all the above parameters in variables
        emprise = self.parameterAsVectorLayer(parameters, self.EMPRISE, context)
        filtre_couche = self.parameterAsBool(parameters, self.FILTRE, context)
        thematique = self.parameterAsEnum(parameters, self.THEMATIQUE, context)
        format_export = self.parameterAsEnum(parameters, self.FORMAT_EXPORT, context)
        dossier_de_sortie = self.parameterAsFile(parameters, self.OUTPUT_FOLDER, context)

        # Cancel the processing if the user click on "Annuler"
        if feedback.isCanceled():
            return {}

        # Add information about the selected layer name in the log
        log("Couche vecteur de couverture : " + emprise.name())
        log("-------------------------------------------------------")

        # Condition to check the user choice in the thematique enum
        if thematique == 0:
            thematique = 'Environnement'
        elif thematique == 1:
            thematique = 'Localisation'
        else:
            thematique = 'Environnement'

        # Add information about the selected layout name in the log
        log("Mise en page : " + thematique)
        log("-------------------------------------------------------")        

        # Condition to check the user choice in the selected bool
        if filtre_couche == True:
            filtre_couche = 'is_selected()'
        elif filtre_couche == False:
            filtre_couche = ''
        else:
            filtre_couche = ''

        # Add information about if the layer have selected entities or not in the log
        log("Entités sélectionnées : " + filtre_couche)
        log("-------------------------------------------------------")

        #Set the progress bar at 25% when all the above code is complete
        bar(25)
        
        # Cancel the processing if the user click on "Annuler"
        if feedback.isCanceled():
            return {}        
        
        # Add information about the beginning of the export
        log("Début export ...")

        # Condition to know which format the user want
        if format_export == 1:
        # Processing to run when png is selected
            export_image = processing.run("native:atlaslayouttoimage",
                                        {'LAYOUT':thematique,
                                        'COVERAGE_LAYER':emprise,
                                        'FILTER_EXPRESSION':filtre_couche,
                                        'SORTBY_EXPRESSION':'',
                                        'SORTBY_REVERSE':False,
                                        'FILENAME_EXPRESSION':"'output_'||@atlas_featurenumber",
                                        'FOLDER':dossier_de_sortie,
                                        'LAYERS':None,
                                        'EXTENSION':8,
                                        'DPI':None,
                                        'GEOREFERENCE':True,
                                        'INCLUDE_METADATA':True,
                                        'ANTIALIAS':True})
            # Set the progress bar to 100% and log the end of the process
            bar(100)
            log("Fin export")
            log("-------------------------------------------------------")
            return export_image
        # Cancel the processing if the user click on "Annuler"        
        if feedback.isCanceled():
            return {}
        
        elif format_export == 0:
        # Processing to run when pdf is selected
            export_pdf = processing.run("native:atlaslayouttomultiplepdf",
                                        {'LAYOUT': thematique,
                                        'COVERAGE_LAYER': emprise,
                                        'FILTER_EXPRESSION': filtre_couche,
                                        'SORTBY_EXPRESSION': '',
                                        'SORTBY_REVERSE': False,
                                        'LAYERS': None,
                                        'DPI': None,
                                        'FORCE_VECTOR': False,
                                        'FORCE_RASTER': False,
                                        'GEOREFERENCE': True,
                                        'INCLUDE_METADATA': True,
                                        'DISABLE_TILED': False,
                                        'SIMPLIFY': True,
                                        'TEXT_FORMAT': 0,
                                        'IMAGE_COMPRESSION': 0,
                                        'OUTPUT_FILENAME': '',
                                        'OUTPUT_FOLDER': dossier_de_sortie})
            # Set the progress bar to 100% and log the end of the process
            bar(100)
            log("Fin export")
            log("-------------------------------------------------------")
            return export_pdf
        # Cancel the processing if the user click on "Annuler"        
        if feedback.isCanceled():
            return {}
        else: 
            log("Fin export")   
            log("-------------------------------------------------------") 
            ''
        # Cancel the processing if the user click on "Annuler"
        if feedback.isCanceled():
            return {}
